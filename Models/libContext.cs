// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace day4.Models
{
    public partial class libContext : DbContext
    {
        public libContext()
        {
        }

        public libContext(DbContextOptions<libContext> options)
            : base(options)
        {
        }

        public virtual DbSet<catalog> catalogs { get; set; }
        public virtual DbSet<photo> photos { get; set; }
        public virtual DbSet<user> users { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=(local);Initial Catalog=lib;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<catalog>(entity =>
            {
                entity.HasOne(d => d.admin)
                    .WithMany(p => p.catalogs)
                    .HasForeignKey(d => d.admin_id)
                    .HasConstraintName("FK_catalog_user");
            });

            modelBuilder.Entity<photo>(entity =>
            {
                entity.HasOne(d => d.author)
                    .WithMany(p => p.photos)
                    .HasForeignKey(d => d.author_id)
                    .HasConstraintName("FK_book_user");

                entity.HasOne(d => d.cat)
                    .WithMany(p => p.photos)
                    .HasForeignKey(d => d.cat_id)
                    .HasConstraintName("FK_book_catalog");
            });

            modelBuilder.Entity<user>(entity =>
            {
                entity.HasOne(d => d.admin)
                    .WithMany(p => p.Inverseadmin)
                    .HasForeignKey(d => d.admin_id)
                    .HasConstraintName("FK_user_user");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}